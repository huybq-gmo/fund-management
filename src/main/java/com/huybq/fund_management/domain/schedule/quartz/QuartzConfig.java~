package com.huybq.fund_management.domain.schedule.quartz;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.quartz.SchedulerFactoryBean;

import javax.sql.DataSource;
import java.util.Properties;

@Configuration
public class QuartzConfig {
    @Autowired
    private DataSource dataSource;

    @Bean
    public SchedulerFactoryBean schedulerFactoryBean() {
        SchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean();

        // Use existing DataSource for JobStore
        schedulerFactoryBean.setDataSource(dataSource);

        // Configure Quartz properties
        Properties quartzProperties = new Properties();
        quartzProperties.put("org.quartz.scheduler.instanceName", "ClusteredScheduler");
        quartzProperties.put("org.quartz.scheduler.instanceId", "AUTO");

        // Configure JobStore
        quartzProperties.put("org.quartz.jobStore.class", "org.quartz.impl.jdbcjobstore.JobStoreTX");
        quartzProperties.put("org.quartz.jobStore.driverDelegateClass", "org.quartz.impl.jdbcjobstore.StdJDBCDelegate");
        quartzProperties.put("org.quartz.jobStore.useProperties", "false");
        quartzProperties.put("org.quartz.jobStore.tablePrefix", "QRTZ_");

        // Enable clustering
        quartzProperties.put("org.quartz.jobStore.isClustered", "true");
        quartzProperties.put("org.quartz.jobStore.clusterCheckinInterval", "20000");

        // Configure thread pool
        quartzProperties.put("org.quartz.threadPool.class", "org.quartz.simpl.SimpleThreadPool");
        quartzProperties.put("org.quartz.threadPool.threadCount", "10");
        quartzProperties.put("org.quartz.threadPool.threadPriority", "5");

        schedulerFactoryBean.setQuartzProperties(quartzProperties);
        schedulerFactoryBean.setStartupDelay(5); // Delay 5 seconds before starting
        schedulerFactoryBean.setAutoStartup(true);
        schedulerFactoryBean.setOverwriteExistingJobs(true);

        return schedulerFactoryBean;
    }
}
}
